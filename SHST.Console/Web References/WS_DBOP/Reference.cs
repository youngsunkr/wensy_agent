//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 4.0.30319.42000에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace WSP.Console.WS_DBOP {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GeneralDBOpSoap", Namespace="http://sqlmvp.kr")]
    public partial class GeneralDBOp : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SelectSPVaulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertSPValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSPValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TempTextOpOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLMonitoringDataInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback IISLogInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServiceStatusInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestStatusInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApptraceInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertQueryResultUsingSPOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GeneralDBOp() {
            this.Url = global::WSP.Console.Properties.Settings.Default.WSP_Console_WS_DBOP_GeneralDBOp;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SelectSPVaulesCompletedEventHandler SelectSPVaulesCompleted;
        
        /// <remarks/>
        public event InsertSPValuesCompletedEventHandler InsertSPValuesCompleted;
        
        /// <remarks/>
        public event UpdateSPValuesCompletedEventHandler UpdateSPValuesCompleted;
        
        /// <remarks/>
        public event TempTextOpCompletedEventHandler TempTextOpCompleted;
        
        /// <remarks/>
        public event CopyTableCompletedEventHandler CopyTableCompleted;
        
        /// <remarks/>
        public event SQLMonitoringDataInsertCompletedEventHandler SQLMonitoringDataInsertCompleted;
        
        /// <remarks/>
        public event IISLogInsertCompletedEventHandler IISLogInsertCompleted;
        
        /// <remarks/>
        public event ServiceStatusInsertCompletedEventHandler ServiceStatusInsertCompleted;
        
        /// <remarks/>
        public event RequestStatusInsertCompletedEventHandler RequestStatusInsertCompleted;
        
        /// <remarks/>
        public event ApptraceInsertCompletedEventHandler ApptraceInsertCompleted;
        
        /// <remarks/>
        public event InsertQueryResultUsingSPCompletedEventHandler InsertQueryResultUsingSPCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SelectSPVaules", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] SelectSPVaules(string strSPName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btParams) {
            object[] results = this.Invoke("SelectSPVaules", new object[] {
                        strSPName,
                        btParams});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void SelectSPVaulesAsync(string strSPName, byte[] btParams) {
            this.SelectSPVaulesAsync(strSPName, btParams, null);
        }
        
        /// <remarks/>
        public void SelectSPVaulesAsync(string strSPName, byte[] btParams, object userState) {
            if ((this.SelectSPVaulesOperationCompleted == null)) {
                this.SelectSPVaulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectSPVaulesOperationCompleted);
            }
            this.InvokeAsync("SelectSPVaules", new object[] {
                        strSPName,
                        btParams}, this.SelectSPVaulesOperationCompleted, userState);
        }
        
        private void OnSelectSPVaulesOperationCompleted(object arg) {
            if ((this.SelectSPVaulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectSPVaulesCompleted(this, new SelectSPVaulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/InsertSPValues", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertSPValues(string strSPName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btParams, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btValues) {
            object[] results = this.Invoke("InsertSPValues", new object[] {
                        strSPName,
                        btParams,
                        btValues});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertSPValuesAsync(string strSPName, byte[] btParams, byte[] btValues) {
            this.InsertSPValuesAsync(strSPName, btParams, btValues, null);
        }
        
        /// <remarks/>
        public void InsertSPValuesAsync(string strSPName, byte[] btParams, byte[] btValues, object userState) {
            if ((this.InsertSPValuesOperationCompleted == null)) {
                this.InsertSPValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertSPValuesOperationCompleted);
            }
            this.InvokeAsync("InsertSPValues", new object[] {
                        strSPName,
                        btParams,
                        btValues}, this.InsertSPValuesOperationCompleted, userState);
        }
        
        private void OnInsertSPValuesOperationCompleted(object arg) {
            if ((this.InsertSPValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertSPValuesCompleted(this, new InsertSPValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/UpdateSPValues", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSPValues(string strSPName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btParams) {
            object[] results = this.Invoke("UpdateSPValues", new object[] {
                        strSPName,
                        btParams});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSPValuesAsync(string strSPName, byte[] btParams) {
            this.UpdateSPValuesAsync(strSPName, btParams, null);
        }
        
        /// <remarks/>
        public void UpdateSPValuesAsync(string strSPName, byte[] btParams, object userState) {
            if ((this.UpdateSPValuesOperationCompleted == null)) {
                this.UpdateSPValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSPValuesOperationCompleted);
            }
            this.InvokeAsync("UpdateSPValues", new object[] {
                        strSPName,
                        btParams}, this.UpdateSPValuesOperationCompleted, userState);
        }
        
        private void OnUpdateSPValuesOperationCompleted(object arg) {
            if ((this.UpdateSPValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSPValuesCompleted(this, new UpdateSPValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/TempTextOp", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] TempTextOp(string strText, int iServerNumber) {
            object[] results = this.Invoke("TempTextOp", new object[] {
                        strText,
                        iServerNumber});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void TempTextOpAsync(string strText, int iServerNumber) {
            this.TempTextOpAsync(strText, iServerNumber, null);
        }
        
        /// <remarks/>
        public void TempTextOpAsync(string strText, int iServerNumber, object userState) {
            if ((this.TempTextOpOperationCompleted == null)) {
                this.TempTextOpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTempTextOpOperationCompleted);
            }
            this.InvokeAsync("TempTextOp", new object[] {
                        strText,
                        iServerNumber}, this.TempTextOpOperationCompleted, userState);
        }
        
        private void OnTempTextOpOperationCompleted(object arg) {
            if ((this.TempTextOpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TempTextOpCompleted(this, new TempTextOpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/CopyTable", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CopyTable(int iServerNumber, string strDest, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btValues) {
            object[] results = this.Invoke("CopyTable", new object[] {
                        iServerNumber,
                        strDest,
                        btValues});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CopyTableAsync(int iServerNumber, string strDest, byte[] btValues) {
            this.CopyTableAsync(iServerNumber, strDest, btValues, null);
        }
        
        /// <remarks/>
        public void CopyTableAsync(int iServerNumber, string strDest, byte[] btValues, object userState) {
            if ((this.CopyTableOperationCompleted == null)) {
                this.CopyTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyTableOperationCompleted);
            }
            this.InvokeAsync("CopyTable", new object[] {
                        iServerNumber,
                        strDest,
                        btValues}, this.CopyTableOperationCompleted, userState);
        }
        
        private void OnCopyTableOperationCompleted(object arg) {
            if ((this.CopyTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyTableCompleted(this, new CopyTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLMonitoringDataInsert", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLMonitoringDataInsert(int iServerNumber, string strDest, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btValues, string strTimeIn, string strColsToInsert) {
            object[] results = this.Invoke("SQLMonitoringDataInsert", new object[] {
                        iServerNumber,
                        strDest,
                        btValues,
                        strTimeIn,
                        strColsToInsert});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLMonitoringDataInsertAsync(int iServerNumber, string strDest, byte[] btValues, string strTimeIn, string strColsToInsert) {
            this.SQLMonitoringDataInsertAsync(iServerNumber, strDest, btValues, strTimeIn, strColsToInsert, null);
        }
        
        /// <remarks/>
        public void SQLMonitoringDataInsertAsync(int iServerNumber, string strDest, byte[] btValues, string strTimeIn, string strColsToInsert, object userState) {
            if ((this.SQLMonitoringDataInsertOperationCompleted == null)) {
                this.SQLMonitoringDataInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLMonitoringDataInsertOperationCompleted);
            }
            this.InvokeAsync("SQLMonitoringDataInsert", new object[] {
                        iServerNumber,
                        strDest,
                        btValues,
                        strTimeIn,
                        strColsToInsert}, this.SQLMonitoringDataInsertOperationCompleted, userState);
        }
        
        private void OnSQLMonitoringDataInsertOperationCompleted(object arg) {
            if ((this.SQLMonitoringDataInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLMonitoringDataInsertCompleted(this, new SQLMonitoringDataInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/IISLogInsert", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int IISLogInsert([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("IISLogInsert", new object[] {
                        btValues,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void IISLogInsertAsync(byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.IISLogInsertAsync(btValues, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void IISLogInsertAsync(byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.IISLogInsertOperationCompleted == null)) {
                this.IISLogInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIISLogInsertOperationCompleted);
            }
            this.InvokeAsync("IISLogInsert", new object[] {
                        btValues,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.IISLogInsertOperationCompleted, userState);
        }
        
        private void OnIISLogInsertOperationCompleted(object arg) {
            if ((this.IISLogInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IISLogInsertCompleted(this, new IISLogInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/ServiceStatusInsert", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ServiceStatusInsert([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("ServiceStatusInsert", new object[] {
                        btValues,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ServiceStatusInsertAsync(byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.ServiceStatusInsertAsync(btValues, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void ServiceStatusInsertAsync(byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.ServiceStatusInsertOperationCompleted == null)) {
                this.ServiceStatusInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceStatusInsertOperationCompleted);
            }
            this.InvokeAsync("ServiceStatusInsert", new object[] {
                        btValues,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.ServiceStatusInsertOperationCompleted, userState);
        }
        
        private void OnServiceStatusInsertOperationCompleted(object arg) {
            if ((this.ServiceStatusInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceStatusInsertCompleted(this, new ServiceStatusInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/RequestStatusInsert", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RequestStatusInsert([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("RequestStatusInsert", new object[] {
                        btValues,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RequestStatusInsertAsync(byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.RequestStatusInsertAsync(btValues, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void RequestStatusInsertAsync(byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.RequestStatusInsertOperationCompleted == null)) {
                this.RequestStatusInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStatusInsertOperationCompleted);
            }
            this.InvokeAsync("RequestStatusInsert", new object[] {
                        btValues,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.RequestStatusInsertOperationCompleted, userState);
        }
        
        private void OnRequestStatusInsertOperationCompleted(object arg) {
            if ((this.RequestStatusInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestStatusInsertCompleted(this, new RequestStatusInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/ApptraceInsert", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ApptraceInsert([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("ApptraceInsert", new object[] {
                        btValues,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ApptraceInsertAsync(byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.ApptraceInsertAsync(btValues, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void ApptraceInsertAsync(byte[] btValues, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.ApptraceInsertOperationCompleted == null)) {
                this.ApptraceInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApptraceInsertOperationCompleted);
            }
            this.InvokeAsync("ApptraceInsert", new object[] {
                        btValues,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.ApptraceInsertOperationCompleted, userState);
        }
        
        private void OnApptraceInsertOperationCompleted(object arg) {
            if ((this.ApptraceInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApptraceInsertCompleted(this, new ApptraceInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/InsertQueryResultUsingSP", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertQueryResultUsingSP(int iServerNumber, string strSPName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] btValues, string strTimeIn) {
            object[] results = this.Invoke("InsertQueryResultUsingSP", new object[] {
                        iServerNumber,
                        strSPName,
                        btValues,
                        strTimeIn});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertQueryResultUsingSPAsync(int iServerNumber, string strSPName, byte[] btValues, string strTimeIn) {
            this.InsertQueryResultUsingSPAsync(iServerNumber, strSPName, btValues, strTimeIn, null);
        }
        
        /// <remarks/>
        public void InsertQueryResultUsingSPAsync(int iServerNumber, string strSPName, byte[] btValues, string strTimeIn, object userState) {
            if ((this.InsertQueryResultUsingSPOperationCompleted == null)) {
                this.InsertQueryResultUsingSPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertQueryResultUsingSPOperationCompleted);
            }
            this.InvokeAsync("InsertQueryResultUsingSP", new object[] {
                        iServerNumber,
                        strSPName,
                        btValues,
                        strTimeIn}, this.InsertQueryResultUsingSPOperationCompleted, userState);
        }
        
        private void OnInsertQueryResultUsingSPOperationCompleted(object arg) {
            if ((this.InsertQueryResultUsingSPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertQueryResultUsingSPCompleted(this, new InsertQueryResultUsingSPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SelectSPVaulesCompletedEventHandler(object sender, SelectSPVaulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectSPVaulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectSPVaulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertSPValuesCompletedEventHandler(object sender, InsertSPValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertSPValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertSPValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void UpdateSPValuesCompletedEventHandler(object sender, UpdateSPValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSPValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSPValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void TempTextOpCompletedEventHandler(object sender, TempTextOpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TempTextOpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TempTextOpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void CopyTableCompletedEventHandler(object sender, CopyTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLMonitoringDataInsertCompletedEventHandler(object sender, SQLMonitoringDataInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLMonitoringDataInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLMonitoringDataInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void IISLogInsertCompletedEventHandler(object sender, IISLogInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IISLogInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IISLogInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ServiceStatusInsertCompletedEventHandler(object sender, ServiceStatusInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceStatusInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceStatusInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RequestStatusInsertCompletedEventHandler(object sender, RequestStatusInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestStatusInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestStatusInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ApptraceInsertCompletedEventHandler(object sender, ApptraceInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApptraceInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApptraceInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertQueryResultUsingSPCompletedEventHandler(object sender, InsertQueryResultUsingSPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertQueryResultUsingSPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertQueryResultUsingSPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591