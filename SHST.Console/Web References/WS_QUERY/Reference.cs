//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 4.0.30319.42000에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace WSP.Console.WS_QUERY {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AddRunningQueriesSoap", Namespace="http://sqlmvp.kr")]
    public partial class AddRunningQueries : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertRunningQueriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLJobAgentFailCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLJobStatusCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLLinkedCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLErrorlogOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLTableSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLBlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLObjectCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLDatabaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLIndexDuplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLServerInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLServiceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLDataBaseFileSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLIndexFlagmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SQLAgentErrorlogOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AddRunningQueries() {
            this.Url = global::WSP.Console.Properties.Settings.Default.WSP_Console_WS_QUERY_AddRunningQueries;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertRunningQueriesCompletedEventHandler InsertRunningQueriesCompleted;
        
        /// <remarks/>
        public event SQLJobAgentFailCheckCompletedEventHandler SQLJobAgentFailCheckCompleted;
        
        /// <remarks/>
        public event SQLJobStatusCheckCompletedEventHandler SQLJobStatusCheckCompleted;
        
        /// <remarks/>
        public event SQLLinkedCheckCompletedEventHandler SQLLinkedCheckCompleted;
        
        /// <remarks/>
        public event SQLErrorlogCompletedEventHandler SQLErrorlogCompleted;
        
        /// <remarks/>
        public event SQLTableSizeCompletedEventHandler SQLTableSizeCompleted;
        
        /// <remarks/>
        public event SQLBlockCompletedEventHandler SQLBlockCompleted;
        
        /// <remarks/>
        public event SQLObjectCheckCompletedEventHandler SQLObjectCheckCompleted;
        
        /// <remarks/>
        public event SQLDatabaseCompletedEventHandler SQLDatabaseCompleted;
        
        /// <remarks/>
        public event SQLIndexDuplicationCompletedEventHandler SQLIndexDuplicationCompleted;
        
        /// <remarks/>
        public event SQLServerInfoCompletedEventHandler SQLServerInfoCompleted;
        
        /// <remarks/>
        public event SQLServiceStatusCompletedEventHandler SQLServiceStatusCompleted;
        
        /// <remarks/>
        public event SQLConfigurationCompletedEventHandler SQLConfigurationCompleted;
        
        /// <remarks/>
        public event SQLDataBaseFileSizeCompletedEventHandler SQLDataBaseFileSizeCompleted;
        
        /// <remarks/>
        public event SQLSessionCompletedEventHandler SQLSessionCompleted;
        
        /// <remarks/>
        public event SQLIndexFlagmentCompletedEventHandler SQLIndexFlagmentCompleted;
        
        /// <remarks/>
        public event SQLAgentErrorlogCompletedEventHandler SQLAgentErrorlogCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/InsertRunningQueries", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertRunningQueries([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("InsertRunningQueries", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertRunningQueriesAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.InsertRunningQueriesAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void InsertRunningQueriesAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.InsertRunningQueriesOperationCompleted == null)) {
                this.InsertRunningQueriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertRunningQueriesOperationCompleted);
            }
            this.InvokeAsync("InsertRunningQueries", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.InsertRunningQueriesOperationCompleted, userState);
        }
        
        private void OnInsertRunningQueriesOperationCompleted(object arg) {
            if ((this.InsertRunningQueriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertRunningQueriesCompleted(this, new InsertRunningQueriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLJobAgentFailCheck", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLJobAgentFailCheck([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLJobAgentFailCheck", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLJobAgentFailCheckAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLJobAgentFailCheckAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLJobAgentFailCheckAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLJobAgentFailCheckOperationCompleted == null)) {
                this.SQLJobAgentFailCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLJobAgentFailCheckOperationCompleted);
            }
            this.InvokeAsync("SQLJobAgentFailCheck", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLJobAgentFailCheckOperationCompleted, userState);
        }
        
        private void OnSQLJobAgentFailCheckOperationCompleted(object arg) {
            if ((this.SQLJobAgentFailCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLJobAgentFailCheckCompleted(this, new SQLJobAgentFailCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLJobStatusCheck", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLJobStatusCheck([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLJobStatusCheck", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLJobStatusCheckAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLJobStatusCheckAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLJobStatusCheckAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLJobStatusCheckOperationCompleted == null)) {
                this.SQLJobStatusCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLJobStatusCheckOperationCompleted);
            }
            this.InvokeAsync("SQLJobStatusCheck", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLJobStatusCheckOperationCompleted, userState);
        }
        
        private void OnSQLJobStatusCheckOperationCompleted(object arg) {
            if ((this.SQLJobStatusCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLJobStatusCheckCompleted(this, new SQLJobStatusCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLLinkedCheck", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLLinkedCheck([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLLinkedCheck", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLLinkedCheckAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLLinkedCheckAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLLinkedCheckAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLLinkedCheckOperationCompleted == null)) {
                this.SQLLinkedCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLLinkedCheckOperationCompleted);
            }
            this.InvokeAsync("SQLLinkedCheck", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLLinkedCheckOperationCompleted, userState);
        }
        
        private void OnSQLLinkedCheckOperationCompleted(object arg) {
            if ((this.SQLLinkedCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLLinkedCheckCompleted(this, new SQLLinkedCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLErrorlog", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLErrorlog([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLErrorlog", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLErrorlogAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLErrorlogAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLErrorlogAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLErrorlogOperationCompleted == null)) {
                this.SQLErrorlogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLErrorlogOperationCompleted);
            }
            this.InvokeAsync("SQLErrorlog", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLErrorlogOperationCompleted, userState);
        }
        
        private void OnSQLErrorlogOperationCompleted(object arg) {
            if ((this.SQLErrorlogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLErrorlogCompleted(this, new SQLErrorlogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLTableSize", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLTableSize([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLTableSize", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLTableSizeAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLTableSizeAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLTableSizeAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLTableSizeOperationCompleted == null)) {
                this.SQLTableSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLTableSizeOperationCompleted);
            }
            this.InvokeAsync("SQLTableSize", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLTableSizeOperationCompleted, userState);
        }
        
        private void OnSQLTableSizeOperationCompleted(object arg) {
            if ((this.SQLTableSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLTableSizeCompleted(this, new SQLTableSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLBlock", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLBlock([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLBlock", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLBlockAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLBlockAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLBlockAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLBlockOperationCompleted == null)) {
                this.SQLBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLBlockOperationCompleted);
            }
            this.InvokeAsync("SQLBlock", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLBlockOperationCompleted, userState);
        }
        
        private void OnSQLBlockOperationCompleted(object arg) {
            if ((this.SQLBlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLBlockCompleted(this, new SQLBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLObjectCheck", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLObjectCheck([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLObjectCheck", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLObjectCheckAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLObjectCheckAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLObjectCheckAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLObjectCheckOperationCompleted == null)) {
                this.SQLObjectCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLObjectCheckOperationCompleted);
            }
            this.InvokeAsync("SQLObjectCheck", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLObjectCheckOperationCompleted, userState);
        }
        
        private void OnSQLObjectCheckOperationCompleted(object arg) {
            if ((this.SQLObjectCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLObjectCheckCompleted(this, new SQLObjectCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLDatabase", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLDatabase([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLDatabase", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLDatabaseAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLDatabaseAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLDatabaseAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLDatabaseOperationCompleted == null)) {
                this.SQLDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLDatabaseOperationCompleted);
            }
            this.InvokeAsync("SQLDatabase", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLDatabaseOperationCompleted, userState);
        }
        
        private void OnSQLDatabaseOperationCompleted(object arg) {
            if ((this.SQLDatabaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLDatabaseCompleted(this, new SQLDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLIndexDuplication", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLIndexDuplication([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLIndexDuplication", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLIndexDuplicationAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLIndexDuplicationAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLIndexDuplicationAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLIndexDuplicationOperationCompleted == null)) {
                this.SQLIndexDuplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLIndexDuplicationOperationCompleted);
            }
            this.InvokeAsync("SQLIndexDuplication", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLIndexDuplicationOperationCompleted, userState);
        }
        
        private void OnSQLIndexDuplicationOperationCompleted(object arg) {
            if ((this.SQLIndexDuplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLIndexDuplicationCompleted(this, new SQLIndexDuplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLServerInfo", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLServerInfo([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLServerInfo", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLServerInfoAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLServerInfoAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLServerInfoAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLServerInfoOperationCompleted == null)) {
                this.SQLServerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLServerInfoOperationCompleted);
            }
            this.InvokeAsync("SQLServerInfo", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLServerInfoOperationCompleted, userState);
        }
        
        private void OnSQLServerInfoOperationCompleted(object arg) {
            if ((this.SQLServerInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLServerInfoCompleted(this, new SQLServerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLServiceStatus", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLServiceStatus([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLServiceStatus", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLServiceStatusAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLServiceStatusAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLServiceStatusAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLServiceStatusOperationCompleted == null)) {
                this.SQLServiceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLServiceStatusOperationCompleted);
            }
            this.InvokeAsync("SQLServiceStatus", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLServiceStatusOperationCompleted, userState);
        }
        
        private void OnSQLServiceStatusOperationCompleted(object arg) {
            if ((this.SQLServiceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLServiceStatusCompleted(this, new SQLServiceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLConfiguration", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLConfiguration([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn) {
            object[] results = this.Invoke("SQLConfiguration", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLConfigurationAsync(byte[] bytearr, int iServerNumber, string strTimeIn) {
            this.SQLConfigurationAsync(bytearr, iServerNumber, strTimeIn, null);
        }
        
        /// <remarks/>
        public void SQLConfigurationAsync(byte[] bytearr, int iServerNumber, string strTimeIn, object userState) {
            if ((this.SQLConfigurationOperationCompleted == null)) {
                this.SQLConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLConfigurationOperationCompleted);
            }
            this.InvokeAsync("SQLConfiguration", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn}, this.SQLConfigurationOperationCompleted, userState);
        }
        
        private void OnSQLConfigurationOperationCompleted(object arg) {
            if ((this.SQLConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLConfigurationCompleted(this, new SQLConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLDataBaseFileSize", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLDataBaseFileSize([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLDataBaseFileSize", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLDataBaseFileSizeAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLDataBaseFileSizeAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLDataBaseFileSizeAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLDataBaseFileSizeOperationCompleted == null)) {
                this.SQLDataBaseFileSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLDataBaseFileSizeOperationCompleted);
            }
            this.InvokeAsync("SQLDataBaseFileSize", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLDataBaseFileSizeOperationCompleted, userState);
        }
        
        private void OnSQLDataBaseFileSizeOperationCompleted(object arg) {
            if ((this.SQLDataBaseFileSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLDataBaseFileSizeCompleted(this, new SQLDataBaseFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLSession", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLSession([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLSession", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLSessionAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLSessionAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLSessionAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLSessionOperationCompleted == null)) {
                this.SQLSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLSessionOperationCompleted);
            }
            this.InvokeAsync("SQLSession", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLSessionOperationCompleted, userState);
        }
        
        private void OnSQLSessionOperationCompleted(object arg) {
            if ((this.SQLSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLSessionCompleted(this, new SQLSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLIndexFlagment", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLIndexFlagment([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLIndexFlagment", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLIndexFlagmentAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLIndexFlagmentAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLIndexFlagmentAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLIndexFlagmentOperationCompleted == null)) {
                this.SQLIndexFlagmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLIndexFlagmentOperationCompleted);
            }
            this.InvokeAsync("SQLIndexFlagment", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLIndexFlagmentOperationCompleted, userState);
        }
        
        private void OnSQLIndexFlagmentOperationCompleted(object arg) {
            if ((this.SQLIndexFlagmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLIndexFlagmentCompleted(this, new SQLIndexFlagmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sqlmvp.kr/SQLAgentErrorlog", RequestNamespace="http://sqlmvp.kr", ResponseNamespace="http://sqlmvp.kr", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SQLAgentErrorlog([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            object[] results = this.Invoke("SQLAgentErrorlog", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SQLAgentErrorlogAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC) {
            this.SQLAgentErrorlogAsync(bytearr, iServerNumber, strTimeIn, strTimeIn_UTC, null);
        }
        
        /// <remarks/>
        public void SQLAgentErrorlogAsync(byte[] bytearr, int iServerNumber, string strTimeIn, string strTimeIn_UTC, object userState) {
            if ((this.SQLAgentErrorlogOperationCompleted == null)) {
                this.SQLAgentErrorlogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSQLAgentErrorlogOperationCompleted);
            }
            this.InvokeAsync("SQLAgentErrorlog", new object[] {
                        bytearr,
                        iServerNumber,
                        strTimeIn,
                        strTimeIn_UTC}, this.SQLAgentErrorlogOperationCompleted, userState);
        }
        
        private void OnSQLAgentErrorlogOperationCompleted(object arg) {
            if ((this.SQLAgentErrorlogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SQLAgentErrorlogCompleted(this, new SQLAgentErrorlogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertRunningQueriesCompletedEventHandler(object sender, InsertRunningQueriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertRunningQueriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertRunningQueriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLJobAgentFailCheckCompletedEventHandler(object sender, SQLJobAgentFailCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLJobAgentFailCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLJobAgentFailCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLJobStatusCheckCompletedEventHandler(object sender, SQLJobStatusCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLJobStatusCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLJobStatusCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLLinkedCheckCompletedEventHandler(object sender, SQLLinkedCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLLinkedCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLLinkedCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLErrorlogCompletedEventHandler(object sender, SQLErrorlogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLErrorlogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLErrorlogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLTableSizeCompletedEventHandler(object sender, SQLTableSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLTableSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLTableSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLBlockCompletedEventHandler(object sender, SQLBlockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLObjectCheckCompletedEventHandler(object sender, SQLObjectCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLObjectCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLObjectCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLDatabaseCompletedEventHandler(object sender, SQLDatabaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLIndexDuplicationCompletedEventHandler(object sender, SQLIndexDuplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLIndexDuplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLIndexDuplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLServerInfoCompletedEventHandler(object sender, SQLServerInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLServerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLServerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLServiceStatusCompletedEventHandler(object sender, SQLServiceStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLServiceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLServiceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLConfigurationCompletedEventHandler(object sender, SQLConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLDataBaseFileSizeCompletedEventHandler(object sender, SQLDataBaseFileSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLDataBaseFileSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLDataBaseFileSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLSessionCompletedEventHandler(object sender, SQLSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLIndexFlagmentCompletedEventHandler(object sender, SQLIndexFlagmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLIndexFlagmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLIndexFlagmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SQLAgentErrorlogCompletedEventHandler(object sender, SQLAgentErrorlogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SQLAgentErrorlogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SQLAgentErrorlogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591